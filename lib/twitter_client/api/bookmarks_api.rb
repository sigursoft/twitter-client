=begin
#Twitter API v2

#Twitter API v2 available endpoints

The version of the OpenAPI document: 2.54

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'cgi'

module TwitterClient
  class BookmarksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Bookmarks by User
    # Returns Tweet objects that have been bookmarked by the requesting User
    # @param id [String] The ID of the authenticated source User for whom to return results.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results.
    # @option opts [String] :pagination_token This parameter is used to get the next &#39;page&#39; of results.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [Get2UsersIdBookmarksResponse]
    def get_users_id_bookmarks(id, opts = {})
      data, _status_code, _headers = get_users_id_bookmarks_with_http_info(id, opts)
      data
    end

    # Bookmarks by User
    # Returns Tweet objects that have been bookmarked by the requesting User
    # @param id [String] The ID of the authenticated source User for whom to return results.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results.
    # @option opts [String] :pagination_token This parameter is used to get the next &#39;page&#39; of results.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [Array<(Get2UsersIdBookmarksResponse, Integer, Hash)>] Get2UsersIdBookmarksResponse data, response status code and response headers
    def get_users_id_bookmarks_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookmarksApi.get_users_id_bookmarks ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BookmarksApi.get_users_id_bookmarks"
      end
      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] > 100
        fail ArgumentError, 'invalid value for "opts[:"max_results"]" when calling BookmarksApi.get_users_id_bookmarks, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] < 1
        fail ArgumentError, 'invalid value for "opts[:"max_results"]" when calling BookmarksApi.get_users_id_bookmarks, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.length < 1
        fail ArgumentError, 'invalid value for "opts[:"pagination_token"]" when calling BookmarksApi.get_users_id_bookmarks, the character length must be great than or equal to 1.'
      end

      allowable_values = ["attachments", "author_id", "context_annotations", "conversation_id", "created_at", "edit_controls", "edit_history_tweet_ids", "entities", "geo", "id", "in_reply_to_user_id", "lang", "non_public_metrics", "organic_metrics", "possibly_sensitive", "promoted_metrics", "public_metrics", "referenced_tweets", "reply_settings", "source", "text", "withheld"]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].length < 1
        fail ArgumentError, 'invalid value for "opts[:"tweet_fields"]" when calling BookmarksApi.get_users_id_bookmarks, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["attachments.media_keys", "attachments.poll_ids", "author_id", "edit_history_tweet_ids", "entities.mentions.username", "geo.place_id", "in_reply_to_user_id", "referenced_tweets.id", "referenced_tweets.id.author_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].length < 1
        fail ArgumentError, 'invalid value for "opts[:"expansions"]" when calling BookmarksApi.get_users_id_bookmarks, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["alt_text", "duration_ms", "height", "media_key", "non_public_metrics", "organic_metrics", "preview_image_url", "promoted_metrics", "public_metrics", "type", "url", "variants", "width"]
      if @api_client.config.client_side_validation && opts[:media_fields] && !opts[:media_fields].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"media_fields\", must include one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:media_fields].nil? && opts[:media_fields].length < 1
        fail ArgumentError, 'invalid value for "opts[:"media_fields"]" when calling BookmarksApi.get_users_id_bookmarks, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["duration_minutes", "end_datetime", "id", "options", "voting_status"]
      if @api_client.config.client_side_validation && opts[:poll_fields] && !opts[:poll_fields].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"poll_fields\", must include one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:poll_fields].nil? && opts[:poll_fields].length < 1
        fail ArgumentError, 'invalid value for "opts[:"poll_fields"]" when calling BookmarksApi.get_users_id_bookmarks, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["created_at", "description", "entities", "id", "location", "name", "pinned_tweet_id", "profile_image_url", "protected", "public_metrics", "url", "username", "verified", "withheld"]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].length < 1
        fail ArgumentError, 'invalid value for "opts[:"user_fields"]" when calling BookmarksApi.get_users_id_bookmarks, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["contained_within", "country", "country_code", "full_name", "geo", "id", "name", "place_type"]
      if @api_client.config.client_side_validation && opts[:place_fields] && !opts[:place_fields].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"place_fields\", must include one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:place_fields].nil? && opts[:place_fields].length < 1
        fail ArgumentError, 'invalid value for "opts[:"place_fields"]" when calling BookmarksApi.get_users_id_bookmarks, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/2/users/{id}/bookmarks'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:max_results] = opts[:max_results] if !opts[:max_results].nil?
      query_params[:pagination_token] = opts[:pagination_token] if !opts[:pagination_token].nil?
      query_params[:'tweet.fields'] = @api_client.build_collection_param(opts[:tweet_fields], :csv) if !opts[:tweet_fields].nil?
      query_params[:expansions] = @api_client.build_collection_param(opts[:expansions], :csv) if !opts[:expansions].nil?
      query_params[:'media.fields'] = @api_client.build_collection_param(opts[:media_fields], :csv) if !opts[:media_fields].nil?
      query_params[:'poll.fields'] = @api_client.build_collection_param(opts[:poll_fields], :csv) if !opts[:poll_fields].nil?
      query_params[:'user.fields'] = @api_client.build_collection_param(opts[:user_fields], :csv) if !opts[:user_fields].nil?
      query_params[:'place.fields'] = @api_client.build_collection_param(opts[:place_fields], :csv) if !opts[:place_fields].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Get2UsersIdBookmarksResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2UserToken']

      new_options = opts.merge(
        :operation => :'BookmarksApi.get_users_id_bookmarks',
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookmarksApi#get_users_id_bookmarks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Tweet to Bookmarks
    # Adds a Tweet (ID in the body) to the requesting User's (in the path) bookmarks
    # @param id [String] The ID of the authenticated source User for whom to add bookmarks.
    # @param bookmark_add_request [BookmarkAddRequest] 
    # @param [Hash] opts the optional parameters
    # @return [BookmarkMutationResponse]
    def post_users_id_bookmarks(id, bookmark_add_request, opts = {})
      data, _status_code, _headers = post_users_id_bookmarks_with_http_info(id, bookmark_add_request, opts)
      data
    end

    # Add Tweet to Bookmarks
    # Adds a Tweet (ID in the body) to the requesting User&#39;s (in the path) bookmarks
    # @param id [String] The ID of the authenticated source User for whom to add bookmarks.
    # @param bookmark_add_request [BookmarkAddRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookmarkMutationResponse, Integer, Hash)>] BookmarkMutationResponse data, response status code and response headers
    def post_users_id_bookmarks_with_http_info(id, bookmark_add_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookmarksApi.post_users_id_bookmarks ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BookmarksApi.post_users_id_bookmarks"
      end
      # verify the required parameter 'bookmark_add_request' is set
      if @api_client.config.client_side_validation && bookmark_add_request.nil?
        fail ArgumentError, "Missing the required parameter 'bookmark_add_request' when calling BookmarksApi.post_users_id_bookmarks"
      end
      # resource path
      local_var_path = '/2/users/{id}/bookmarks'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(bookmark_add_request)

      # return_type
      return_type = opts[:debug_return_type] || 'BookmarkMutationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2UserToken']

      new_options = opts.merge(
        :operation => :'BookmarksApi.post_users_id_bookmarks',
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookmarksApi#post_users_id_bookmarks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a bookmarked Tweet
    # Removes a Tweet from the requesting User's bookmarked Tweets.
    # @param id [String] The ID of the authenticated source User whose bookmark is to be removed.
    # @param tweet_id [String] The ID of the Tweet that the source User is removing from bookmarks.
    # @param [Hash] opts the optional parameters
    # @return [BookmarkMutationResponse]
    def users_id_bookmarks_delete(id, tweet_id, opts = {})
      data, _status_code, _headers = users_id_bookmarks_delete_with_http_info(id, tweet_id, opts)
      data
    end

    # Remove a bookmarked Tweet
    # Removes a Tweet from the requesting User&#39;s bookmarked Tweets.
    # @param id [String] The ID of the authenticated source User whose bookmark is to be removed.
    # @param tweet_id [String] The ID of the Tweet that the source User is removing from bookmarks.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookmarkMutationResponse, Integer, Hash)>] BookmarkMutationResponse data, response status code and response headers
    def users_id_bookmarks_delete_with_http_info(id, tweet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookmarksApi.users_id_bookmarks_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BookmarksApi.users_id_bookmarks_delete"
      end
      # verify the required parameter 'tweet_id' is set
      if @api_client.config.client_side_validation && tweet_id.nil?
        fail ArgumentError, "Missing the required parameter 'tweet_id' when calling BookmarksApi.users_id_bookmarks_delete"
      end
      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && tweet_id !~ pattern
        fail ArgumentError, "invalid value for 'tweet_id' when calling BookmarksApi.users_id_bookmarks_delete, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/2/users/{id}/bookmarks/{tweet_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'tweet_id' + '}', CGI.escape(tweet_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BookmarkMutationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth2UserToken']

      new_options = opts.merge(
        :operation => :'BookmarksApi.users_id_bookmarks_delete',
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookmarksApi#users_id_bookmarks_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
